# .github/workflows/ci.yml
name: CI â€” Tests & Coverage

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 20

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: journal_db_test
        # No need to publish ports; use hostname "postgres" from the job.
        options: >-
          --health-cmd="pg_isready -U postgres -d journal_db_test || exit 1"
          --health-interval=5s
          --health-timeout=5s
          --health-retries=30

    strategy:
      matrix:
        python-version: ["3.11", "3.12"]

    env:
      # IMPORTANT: sync driver for Alembic in CI (no +asyncpg)
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/journal_db_test
      PYTHONPATH: .

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov

      # Rely on the service healthcheck above; if Postgres isn't healthy after retries,
      # the next steps will fail. These two debug steps help you see why.
      - name: Show services & health
        if: always()
        run: |
          docker ps -a
          # Try a direct TCP check (no auth)
          (echo > /dev/tcp/postgres/5432) >/dev/null 2>&1 && echo "5432 is open" || echo "5432 not open"

      - name: Print Postgres logs (helpful if later steps fail)
        if: always()
        run: |
          echo "----- postgres container logs -----"
          docker logs ${{ job.services.postgres.id }} || true
          echo "-----------------------------------"

      - name: Debug DB URL (settings vs env)
        run: |
          echo "DATABASE_URL (env): ${DATABASE_URL}"
          python - <<'PY'
          import os
          from app.core.config import settings
          print("settings.database_url:", settings.database_url)
          print("settings.sync_database_url:", settings.sync_database_url)
          PY

      # ðŸ‘‡ New step: prove DB is reachable with an actual SQL call
      - name: Verify Postgres connectivity (SELECT version)
        run: |
          PGPASSWORD=postgres psql -h postgres -U postgres -d journal_db_test -c "SELECT version();"

      - name: Run Alembic migrations
        run: alembic upgrade head

      - name: Run tests with coverage
        run: pytest --cov=app --cov-report=xml --cov-fail-under=90

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage.xml
          fail_ci_if_error: true
