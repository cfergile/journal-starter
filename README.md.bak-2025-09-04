# Journal API

[![CI](https://github.com/cfergile/journal-starter/actions/workflows/ci.yml/badge.svg)](https://github.com/cfergile/journal-starter/actions/workflows/ci.yml)
[![codecov](https://codecov.io/gh/cfergile/journal-starter/branch/main/graph/badge.svg)](https://codecov.io/gh/cfergile/journal-starter)
![Release](https://img.shields.io/github/v/release/cfergile/journal-starter?sort=semver)
[![Uptime - API Health](https://github.com/cfergile/journal-starter/actions/workflows/uptime.yml/badge.svg)](https://github.com/cfergile/journal-starter/actions/workflows/uptime.yml)
[![k6 CRUD (ephemeral env)](https://github.com/cfergile/journal-starter/actions/workflows/k6-crud-ephemeral.yml/badge.svg)](https://github.com/cfergile/journal-starter/actions/workflows/k6-crud-ephemeral.yml)

A FastAPI-based CRUD Journal API built as part of the **Learn to Cloud Guide** capstone project.  
Goal: practice Python, APIs, databases, testing ‚Äî and ship it publicly.

---

## üåê Live Demo (Render)
- Base: **https://journal-starter.onrender.com**  
- Health: **/healthz** ‚Üí https://journal-starter.onrender.com/healthz  
- Docs: **/docs** ‚Üí https://journal-starter.onrender.com/docs

> Free tier may cold-start; first request can be slow.

---

## üéØ Objectives

**Core (capstone):**
- FastAPI REST API
- CRUD for journal entries
- PostgreSQL + Alembic migrations
- pytest + httpx.AsyncClient tests

**Extended:**
- Docker & Makefile for reproducible dev
- CI quality gates (lint, type, security, coverage)
- Public deploy on Render (free)
- Ops & Monitoring (health, metrics, uptime+Slack, k6)

---

## üöÄ Features

- **POST** `/entries/` ‚Äî create entry  
- **GET** `/entries/` ‚Äî list entries  
- **GET** `/entries/{id}` ‚Äî get entry  
- **PUT** `/entries/{id}` ‚Äî update entry  
- **DELETE** `/entries/{id}` ‚Äî delete entry  
- **GET** `/healthz` ‚Äî health check  
- **GET** `/metrics` ‚Äî Prometheus metrics (enabled when `PROMETHEUS_ENABLED=true`)

Entry fields: `work`, `struggle`, `intention`, plus `id`, `created_at`, `updated_at`.

---

## üõ† Setup Options

### 1) Local (dev)
**Requirements:** Python 3.11+, local Postgres.

```bash
git clone https://github.com/cfergile/journal-starter.git
cd journal-starter

cp .env.example .env
python -m venv .venv && source .venv/bin/activate
pip install -r requirements.txt

# DB migrate
alembic upgrade head

# Run API
uvicorn app.main:app --reload
# or: make run
# API: http://localhost:8000  |  Docs: http://localhost:8000/docs
2) Docker Compose
Requirements: Docker / Docker Compose.

bash
Copy code
git clone https://github.com/cfergile/journal-starter.git
cd journal-starter

cp .env.example .env
make compose-up
make compose-migrate  # runs alembic upgrade head in the container
üß™ Testing & CI Quality Gates
Local shortcuts (mirror CI):

bash
Copy code
make precommit       # ruff, black, isort, mypy
make test            # pytest -q
make cov             # coverage in terminal
make ci              # coverage XML + threshold ‚â•90%
make lint-fix        # autofix linting
CI includes: Ruff ‚Ä¢ Black ‚Ä¢ isort ‚Ä¢ mypy ‚Ä¢ pytest ‚Ä¢ Bandit ‚Ä¢ Trivy FS (passing) ‚Ä¢ Codecov.

k6 quick checks
bash
Copy code
# Smoke test against prod (hits /healthz)
make smoke
# Override to test locally:
make smoke BASE_URL=http://localhost:8000

# CRUD test against local dev (safe)
make crud-local
# (Opt-in) CRUD against prod (mutates prod data):
make crud-prod
Ephemeral E2E (CI): GitHub Actions workflow k6-crud-ephemeral.yml spins up Postgres ‚Üí runs Alembic ‚Üí starts API ‚Üí runs the k6 CRUD test. Does not touch prod/staging.

‚öôÔ∏è Environment Variables
See .env.example for the full list. Key snippets:

ini
Copy code
# Database parts (used if no DATABASE_URL is provided)
DB_HOST=localhost
DB_PORT=5432
DB_NAME=journal
DB_USER=postgres
DB_PASSWORD=change_this_password

# Optional: full DSN; app normalizes to async driver as needed
# DATABASE_URL=postgresql+asyncpg://postgres:postgres@localhost:5432/journal

# Ops knobs
LOG_LEVEL=INFO
PROMETHEUS_ENABLED=true
# SENTRY_DSN=...
üì¶ Tech Stack
FastAPI ‚Ä¢ SQLAlchemy 2.0 (async) ‚Ä¢ Alembic ‚Ä¢ PostgreSQL ‚Ä¢ pytest/httpx
Ruff ‚Ä¢ Black ‚Ä¢ isort ‚Ä¢ mypy ‚Ä¢ Bandit ‚Ä¢ Trivy ‚Ä¢ GitHub Actions ‚Ä¢ Codecov
Render (deploy) ‚Ä¢ Prometheus-style metrics ‚Ä¢ k6

üìö Learning Outcomes
Built and tested a real async API with migrations

Reproducible dev via Makefile/Docker

Hardened CI (lint/type/security/coverage)

Public deploy on Render with Postgres add-on

Ops: health, metrics, uptime+Slack, smoke/CRUD performance checks

‚òÅÔ∏è Deployment
‚úÖ Render (live): https://journal-starter.onrender.com